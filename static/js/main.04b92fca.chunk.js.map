{"version":3,"sources":["components/SettingsModal/Settings.module.css","components/InfoModal/Info.module.css","components/SettingsBtn/SettingsBtn.module.css","components/Timer/Timer.module.css","components/InfoBtn/InfoBtn.module.css","components/TimerDisplay/index.jsx","components/SettingsBtn/index.jsx","components/SettingsModal/index.jsx","audio/bell.flac","components/InfoBtn/index.jsx","components/InfoModal/index.jsx","store/action.js","components/Timer/index.jsx","App.js","serviceWorker.js","store/reducer.js","index.js"],"names":["module","exports","TimeDisplay","props","radius","circumference","normalizedRadius","Math","PI","strokeDashoffset","progress","className","width","viewBox","stroke","fill","strokeWidth","r","cx","cy","strokeDasharray","style","children","SettingsBtn","onClick","onclick","css","btn","fontSize","Settings","title","active","backdrop","modal","content","InfoBtn","Info","CHANGE_STATE","Timer","state","useSelector","dispatch","useDispatch","useEffect","localStorage","setItem","JSON","stringify","useState","workTime","pomodoroInterval","setPomodoroInterval","shortBreak","shortBrake","setShortBrake","longBreak","longBrake","setLongBreak","pomodoros","setPomodoros","autoPlay","setAutoPlay","Audio","bellSound","bell","time","setTime","pomodoro","setPomodoro","restFlag","setRestFlag","buttonText","setButtonText","startStatus","setStartStatus","settings","setSettings","info","setInfo","temporary","setTemporary","setTimeout","play","interval","flag","pomodoroCount","Swal","fire","allowOutsideClick","onOpen","onClose","blueBg","allowEnterKey","confirmButtonColor","redBg","minutes","floor","seconds","onModal","onInfo","document","body","classList","remove","add","total","getProgress","test","Button","size","variant","console","log","onChange","TextField","id","type","fullWidth","value","e","target","FormControlLabel","control","Checkbox","checked","label","color","obj","App","Boolean","window","location","hostname","match","localPomodorState","parse","getItem","initialState","store","createStore","action","parseInt","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.04b92fca.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"backdrop\":\"Settings_backdrop__1z-tq\",\"modal\":\"Settings_modal__2D6Gj\",\"title\":\"Settings_title__1gPek\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"backdrop\":\"Info_backdrop__1I946\",\"modal\":\"Info_modal__16ylF\",\"title\":\"Info_title__1AB-8\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"btn\":\"SettingsBtn_btn__1rJWs\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"test\":\"Timer_test__20gV6\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"btn\":\"InfoBtn_btn__1-Edz\",\"icon\":\"InfoBtn_icon__2LguR\"};","import React from \"react\";\r\nimport \"./TimerDisplay.css\";\r\n\r\nconst TimeDisplay = (props) => {\r\n  const radius = 150;\r\n  const stroke = 5;\r\n  const normalizedRadius = radius - stroke * 2;\r\n  const circumference = normalizedRadius * 2 * Math.PI;\r\n  const strokeDashoffset =\r\n    circumference - (props.progress / 100) * circumference;\r\n\r\n  return (\r\n    <div className=\"TimeDisplay\">\r\n      <svg width=\"100%\" viewBox={`0 0 ${radius * 2} ${radius * 2}`}>\r\n        <circle\r\n          stroke=\"#ddd\"\r\n          fill=\"#fff\"\r\n          strokeWidth={stroke}\r\n          r={normalizedRadius}\r\n          cx={radius}\r\n          cy={radius}\r\n        />\r\n        <circle\r\n          stroke=\"#d9644f\"\r\n          fill=\"transparent\"\r\n          strokeWidth={stroke}\r\n          strokeDasharray={circumference + \" \" + circumference}\r\n          style={{ strokeDashoffset }}\r\n          r={normalizedRadius}\r\n          cx={radius}\r\n          cy={radius}\r\n        />\r\n      </svg>\r\n      <div>\r\n        {props.children}\r\n        <p>Pomodoro Technique</p>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TimeDisplay;\r\n","import React from \"react\";\r\nimport css from \"./SettingsBtn.module.css\";\r\nimport SettingsIcon from \"@material-ui/icons/Settings\";\r\n\r\nconst SettingsBtn = (props) => {\r\n  return (\r\n    <button onClick={props.onclick} className={css.btn}>\r\n      <SettingsIcon fontSize=\"large\" />\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default SettingsBtn;\r\n","import React from \"react\";\r\nimport css from \"./Settings.module.css\";\r\n\r\nfunction Settings({ title, active, children }) {\r\n  if (!active) {\r\n    return null;\r\n  }\r\n  return (\r\n    <div className={css.backdrop}>\r\n      <div className={css.modal}>\r\n        {title && <h2 className={css.title}>{title}</h2>}\r\n        <div className={css.content}>{children}</div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Settings;\r\n","export default __webpack_public_path__ + \"static/media/bell.cef2159b.flac\";","import React from \"react\";\r\nimport css from \"./InfoBtn.module.css\";\r\nimport InfoIcon from \"@material-ui/icons/Info\";\r\n\r\nconst InfoBtn = (props) => {\r\n  return (\r\n    <button onClick={props.onclick} className={css.btn}>\r\n      <InfoIcon fontSize=\"large\" />\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default InfoBtn;\r\n","import React from \"react\";\r\nimport css from \"./Info.module.css\";\r\n\r\nfunction Info({ title, active, children }) {\r\n  if (!active) {\r\n    return null;\r\n  }\r\n  return (\r\n    <div className={css.backdrop}>\r\n      <div className={css.modal}>\r\n        {title && <h2 className={css.title}>{title}</h2>}\r\n        <div className={css.content}>{children}</div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Info;\r\n","export const CHANGE_STATE = \"CHANGE_STATE\";\r\n\r\nexport const change_state = (obj) => ({\r\n  type: CHANGE_STATE,\r\n  obj,\r\n});\r\n","import React, { useState, useEffect } from \"react\";\r\nimport TimerDisplay from \"../TimerDisplay\";\r\nimport SettingsBtn from \"../SettingsBtn\";\r\nimport Settings from \"../SettingsModal\";\r\nimport css from \"./Timer.module.css\";\r\nimport bellSound from \"../../audio/bell.flac\";\r\nimport Swal from \"sweetalert2\";\r\nimport InfoBtn from \"../InfoBtn\";\r\nimport Info from \"../InfoModal\";\r\nimport { Button, FormControlLabel, Checkbox } from \"@material-ui/core\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { change_state } from \"../../store/action\";\r\n\r\nfunction Timer() {\r\n  const state = useSelector((state) => state);\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n    localStorage.setItem(\"pomodorState\", JSON.stringify(state));\r\n  }, [state]);\r\n\r\n  // Here are time value hooks\r\n  const [pomodoroInterval, setPomodoroInterval] = useState(state.workTime);\r\n  const [shortBrake, setShortBrake] = useState(state.shortBreak);\r\n  const [longBrake, setLongBreak] = useState(state.longBreak);\r\n  const [pomodoros, setPomodoros] = useState(state.pomodoros);\r\n  const [autoPlay, setAutoPlay] = useState(true);\r\n\r\n  // Hooks for sounds\r\n  const [bell] = useState(new Audio(bellSound));\r\n\r\n  // Other hooks\r\n  const [time, setTime] = useState(pomodoroInterval * 60);\r\n  const [pomodoro, setPomodoro] = useState(1);\r\n  const [restFlag, setRestFlag] = useState(false);\r\n  const [buttonText, setButtonText] = useState(\"Pause\");\r\n  const [startStatus, setStartStatus] = useState(false);\r\n\r\n  // Hooks for Modals\r\n  const [settings, setSettings] = useState(false);\r\n  const [info, setInfo] = useState(false);\r\n\r\n  // Here is a temporary value for progress bar\r\n  const [temporary, setTemporary] = useState(pomodoroInterval);\r\n\r\n  useEffect(() => {\r\n    if (startStatus) {\r\n      if (buttonText === \"Pause\") {\r\n        if (time !== 0) {\r\n          setTimeout(() => {\r\n            setTime(time - 1);\r\n          }, 1000);\r\n        } else {\r\n          bell.play();\r\n          pomodoroCount();\r\n        }\r\n      }\r\n    }\r\n  });\r\n\r\n  const start = () => {\r\n    console.log(\"test\");\r\n    setStartStatus(true);\r\n  };\r\n\r\n  const minutes = Math.floor(time / 60);\r\n  const seconds = time - minutes * 60;\r\n\r\n  function pomodoroCount() {\r\n    let pomodoroCount = pomodoro;\r\n    let interval;\r\n    let flag;\r\n    if (pomodoro < pomodoros && !restFlag) {\r\n      interval = shortBrake;\r\n      flag = true;\r\n      setTemporary(shortBrake);\r\n\r\n      autoPlay === true &&\r\n        Swal.fire({\r\n          title: \"Time to have a rest\",\r\n          allowOutsideClick: false,\r\n          onOpen: () => {\r\n            setButtonText(\"Continue\");\r\n          },\r\n          onClose: () => {\r\n            setButtonText(\"Pause\");\r\n            blueBg();\r\n          },\r\n          allowEnterKey: true,\r\n          confirmButtonColor: \"red\",\r\n        });\r\n    } else if (pomodoro < pomodoros && restFlag) {\r\n      pomodoroCount = pomodoro + 1;\r\n      interval = pomodoroInterval;\r\n      flag = false;\r\n      setTemporary(pomodoroInterval);\r\n\r\n      autoPlay === true &&\r\n        Swal.fire({\r\n          title: \"Time to work\",\r\n          allowOutsideClick: false,\r\n          onOpen: () => {\r\n            setButtonText(\"Continue\");\r\n          },\r\n          onClose: () => {\r\n            setButtonText(\"Pause\");\r\n            redBg();\r\n          },\r\n          allowEnterKey: true,\r\n          confirmButtonColor: \"blue\",\r\n        });\r\n    } else if (pomodoro >= pomodoros) {\r\n      pomodoroCount = 1;\r\n      interval = longBrake;\r\n      flag = true;\r\n      setTemporary(longBrake);\r\n      blueBg();\r\n\r\n      autoPlay === true &&\r\n        Swal.fire({\r\n          title: \"Time to have the longest break\",\r\n          allowOutsideClick: false,\r\n          onOpen: () => {\r\n            setButtonText(\"Continue\");\r\n          },\r\n          onClose: () => {\r\n            setButtonText(\"Pause\");\r\n          },\r\n          allowEnterKey: true,\r\n          confirmButtonColor: \"red\",\r\n        });\r\n    }\r\n    setPomodoro(pomodoroCount);\r\n    setTime(interval * 60);\r\n    setRestFlag(flag);\r\n  }\r\n\r\n  function pauseAndResume() {\r\n    let newText;\r\n    if (buttonText === \"Pause\") {\r\n      newText = \"Continue\";\r\n    } else {\r\n      newText = \"Pause\";\r\n    }\r\n    setButtonText(newText);\r\n  }\r\n\r\n  // Func for progress bar\r\n  const getProgress = () => {\r\n    const current = time;\r\n    const total = temporary * 60;\r\n    return ((total - current) / total) * 100;\r\n  };\r\n\r\n  const onModal = () => {\r\n    return setSettings(true);\r\n  };\r\n\r\n  const onInfo = () => {\r\n    return setInfo(true);\r\n  };\r\n\r\n  const onCheckBox = () => {\r\n    return setAutoPlay(!autoPlay);\r\n  };\r\n\r\n  const reset = () => {\r\n    if (buttonText === \"Continue\") {\r\n      setStartStatus(false);\r\n      setRestFlag(false);\r\n      setTime(temporary * 60);\r\n      setButtonText(\"Pause\");\r\n    }\r\n  };\r\n\r\n  // Func for changing bg Color while a break\r\n  const blueBg = () => {\r\n    document.body.classList.remove(\"restout\");\r\n    document.body.classList.add(\"workout\");\r\n  };\r\n\r\n  const redBg = () => {\r\n    document.body.classList.remove(\"workout\");\r\n    document.body.classList.add(\"restout\");\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <InfoBtn onclick={onInfo} />\r\n      <SettingsBtn onclick={onModal} />\r\n\r\n      <TimerDisplay time={pomodoroInterval} progress={getProgress()}>\r\n        <h2 className={css.test}>\r\n          {minutes < 10 ? `0${minutes}` : minutes} :{\" \"}\r\n          {seconds < 10 ? `0${seconds}` : seconds}\r\n        </h2>\r\n      </TimerDisplay>\r\n      <br />\r\n\r\n      {startStatus ? (\r\n        <div>\r\n          <Button size=\"large\" variant=\"outlined\" onClick={pauseAndResume}>\r\n            {buttonText}\r\n          </Button>\r\n          <Button size=\"large\" title=\"Click <Pause> to reset\" onClick={reset}>\r\n            Reset\r\n          </Button>\r\n        </div>\r\n      ) : (\r\n        <Button variant=\"outlined\" onClick={start} size=\"large\">\r\n          Start\r\n        </Button>\r\n      )}\r\n\r\n      <Settings active={settings} onChange={onModal}>\r\n        <h3>Settings</h3>\r\n        <div>Pomodoro</div>\r\n        <TextField\r\n          id=\"standard-basic\"\r\n          variant=\"outlined\"\r\n          type=\"number\"\r\n          fullWidth\r\n          value={pomodoroInterval}\r\n          onChange={(e) => {\r\n            setPomodoroInterval(e.target.value);\r\n            setTime(e.target.value * 60);\r\n            setTemporary(e.target.value);\r\n          }}\r\n        />\r\n\r\n        <div>Short Break</div>\r\n        <TextField\r\n          id=\"standard-basic\"\r\n          variant=\"outlined\"\r\n          fullWidth\r\n          value={shortBrake}\r\n          onChange={(e) => setShortBrake(e.target.value)}\r\n          type=\"number\"\r\n        />\r\n\r\n        <div>Long Break</div>\r\n        <TextField\r\n          id=\"standard-basic\"\r\n          variant=\"outlined\"\r\n          fullWidth\r\n          value={longBrake}\r\n          onChange={(e) => setLongBreak(e.target.value)}\r\n          type=\"number\"\r\n        />\r\n\r\n        <div>Pomodoro Count</div>\r\n        <TextField\r\n          id=\"standard-basic\"\r\n          variant=\"outlined\"\r\n          fullWidth\r\n          value={pomodoros}\r\n          onChange={(e) => {\r\n            setPomodoros(e.target.value);\r\n            console.log(\"count\");\r\n          }}\r\n          type=\"number\"\r\n        />\r\n\r\n        <FormControlLabel\r\n          control={\r\n            <Checkbox\r\n              checked={autoPlay}\r\n              onChange={onCheckBox}\r\n              value=\"checkedA\"\r\n            />\r\n          }\r\n          label=\"Auto Play without push notifications\"\r\n        />\r\n        <br />\r\n\r\n        <Button\r\n          variant=\"outlined\"\r\n          size=\"large\"\r\n          color=\"primary\"\r\n          onClick={() => {\r\n            dispatch(\r\n              change_state({\r\n                pomodoroInterval,\r\n                longBrake,\r\n                shortBrake,\r\n                pomodoros,\r\n              })\r\n            );\r\n            setSettings(false);\r\n          }}\r\n        >\r\n          All ok\r\n        </Button>\r\n      </Settings>\r\n\r\n      <Info active={info} onChange={onInfo}>\r\n        <h2>About Pomodoro Technique</h2>\r\n        Lorem ipsum dolor sit, amet consectetur adipisicing elit. Nihil labore\r\n        sit quas nam repellat perspiciatis autem, distinctio suscipit ex, quae\r\n        in fuga?\r\n        <h2>Use Experience</h2>\r\n        Lorem ipsum dolor sit amet consectetur adipisicing elit. Reiciendis\r\n        aliquid cupiditate fugiat velit? Quam explicabo consequuntur, odio non\r\n        qui recusandae vitae dolore nam odit eius maxime maiores voluptate\r\n        quaerat provident?\r\n        <br />\r\n        <br />\r\n        <Button\r\n          variant=\"outlined\"\r\n          size=\"large\"\r\n          onClick={() => {\r\n            setInfo(false);\r\n            setPomodoro(1);\r\n          }}\r\n        >\r\n          Close\r\n        </Button>\r\n      </Info>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Timer;\r\n","import React from \"react\";\nimport \"./App.css\";\nimport Timer from \"./components/Timer/index\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Timer />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === \"localhost\" ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === \"[::1]\" ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener(\"load\", () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            \"This web app is being served cache-first by a service \" +\r\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then((registration) => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === \"installed\") {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                \"New content is available and will be used when all \" +\r\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log(\"Content is cached for offline use.\");\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch((error) => {\r\n      console.error(\"Error during service worker registration:\", error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then((response) => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get(\"content-type\");\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        \"No internet connection found. App is running in offline mode.\"\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if (\"serviceWorker\" in navigator) {\r\n    navigator.serviceWorker.ready.then((registration) => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import { CHANGE_STATE } from \"./action\";\r\n\r\nconst localPomodorState = JSON.parse(localStorage.getItem(\"pomodorState\"));\r\n\r\nconst initialState = {\r\n  workTime: 25,\r\n  shortBreak: 5,\r\n  longBreak: 10,\r\n  pomodoros: 4,\r\n};\r\n\r\nexport const rootReducer = (\r\n  state = localPomodorState ? localPomodorState : initialState,\r\n  action\r\n) => {\r\n  switch (action.type) {\r\n    case CHANGE_STATE:\r\n      return {\r\n        ...state,\r\n        workTime: parseInt(action.obj.pomodoroInterval),\r\n        shortBreak: parseInt(action.obj.shortBrake),\r\n        longBreak: parseInt(action.obj.longBrake),\r\n        pomodoros: parseInt(action.obj.pomodoros),\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { rootReducer } from \"./store/reducer\";\nimport { createStore } from \"redux\";\nimport { Provider } from \"react-redux\";\n\nconst store = createStore(rootReducer);\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}